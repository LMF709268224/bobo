#!/bin/sh
#
# An example hook script to check the commit log message.
# Called by "git commit" with one argument, the name of the file
# that has the commit message.  The hook should exit with non-zero
# status after issuing an appropriate message if it wants to stop the
# commit.  The hook is allowed to edit the commit message file.
#
# To enable this hook, rename this file to "commit-msg".

# Uncomment the below to add a Signed-off-by line to the message.
# Doing this in a hook is a bad idea in general, but the prepare-commit-msg
# hook is more suited to it.
#
# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\(.*>\).*$/Signed-off-by: \1/p')
# grep -qs "^$SOB" "$1" || echo "$SOB" >> "$1"

# This example catches duplicate Signed-off-by lines.

# test "" = "$(grep '^Signed-off-by: ' "$1" |
	 # sort | uniq -c | sed -e '/^[ 	]*1[ 	]/d')" || {
	# echo >&2 Duplicate Signed-off-by lines.
	# exit 1
# }

pass=true
RED='\033[1;31m'
GREEN='\033[0;32m'
NC='\033[0m'

echo "Running Linters:"
files=$(git diff --cached --name-status --diff-filter=ACM)
while read st file; do
	# echo "file:$file"
	# do a check only on the php files
	if [[ $file =~ .lua$ ]]; then
		# echo "luacheck:$file"
		luacheckResult=$(luacheck $file)
		ret_code=$?
		if [ $ret_code != 0 ]; then
			pass=false
			printf "\n${RED}luacheck failed:${NC}"
			echo "$luacheckResult\n"
		fi
	fi
done <<< "$files"

echo "pass is: $pass"
if $pass; then
	exit 0
fi

exit 1
